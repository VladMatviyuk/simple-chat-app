{"version":3,"sources":["components/Chat/Chat.js","components/Join/Join.js","components/InfoBar/InfoBar.js","components/Input/Input.js","components/Messages/Message/Message.js","components/Messages/Messages.js","components/ShowUsers/ShowUsers.js","components/UsersList/UsersList.js","App.js","index.js"],"names":["socket","Join","useState","name","setName","room","setRoom","roomInvite","useParams","useEffect","className","placeholder","type","onChange","e","target","value","undefined","onClick","preventDefault","to","InfoBar","handleShowUsers","href","Input","message","setMessage","sendMessage","onKeyPress","key","Message","user","text","date","isSendByCurrentUser","trimmedName","trim","toLowerCase","Messages","messages","Fragment","map","i","ShowUsers","users","inputRef","useRef","url","window","location","split","current","select","document","execCommand","ref","defaultValue","UsersList","inputRefLink","Chat","setMessages","setUsers","showUsers","setShowUsers","queryString","parse","search","io","emit","off","on","App","path","exact","component","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.c06f2f87.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport InfoBar from \"../InfoBar/InfoBar\";\r\nimport Input from \"../Input/Input\";\r\nimport Messages from \"../Messages/Messages\";\r\nimport ShowUsers from \"../ShowUsers/ShowUsers\";\r\nimport \"./Chat.css\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport UsersList from \"../UsersList/UsersList\";\r\n\r\nlet socket;\r\n\r\nconst Chat = ({ location }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [showUsers, setShowUsers] = useState(false);\r\n  const ENDPOINT = \"localhost:5000\";\r\n\r\n  useEffect(() => {\r\n    const { name, room } = queryString.parse(location.search);\r\n\r\n    socket = io(ENDPOINT);\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    socket.emit(\"join\", { name, room }, () => {});\r\n\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n      socket.off();\r\n    };\r\n  }, [ENDPOINT, location.search]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      setMessages((messages) => [...messages, message]);\r\n    });\r\n\r\n    socket.on(\"roomData\", ({ users }) => {\r\n      setUsers(users);\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (message) {\r\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\r\n    }\r\n  };\r\n\r\n  const handleShowUsers = () => {\r\n    setShowUsers(!showUsers);\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"container\">\r\n        <InfoBar room={room} handleShowUsers={handleShowUsers} />\r\n        <div className=\"content\">\r\n          <div className=\"left\">\r\n            {showUsers ? (\r\n              <ShowUsers users={users} room={room}></ShowUsers>\r\n            ) : null}\r\n\r\n            <ScrollToBottom className=\"messages\">\r\n              <Messages messages={messages} name={name} />\r\n            </ScrollToBottom>\r\n\r\n            <Input\r\n              message={message}\r\n              setMessage={setMessage}\r\n              sendMessage={sendMessage}\r\n            />\r\n          </div>\r\n          <div className=\"right\">\r\n            <UsersList users={users} room={room} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nimport \"./Join.css\";\r\nconst Join = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n\r\n  let { roomInvite } = useParams();\r\n\r\n  useEffect(() => {\r\n    setRoom(roomInvite);\r\n  }, [roomInvite]);\r\n\r\n  return (\r\n    <div className=\"wrapperJoin\">\r\n      <div className=\"containerJoin\">\r\n        <h1 className=\"header\">Join</h1>\r\n        <div className=\"inputJoinWrapper\">\r\n          <input\r\n            placeholder=\"Name\"\r\n            className=\"inputJoin\"\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              setName(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"inputJoinWrapper\">\r\n          <input\r\n            placeholder=\"Room\"\r\n            className=\"inputJoin\"\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              setRoom(e.target.value);\r\n            }}\r\n            value={typeof roomInvite !== undefined ? roomInvite : \"\"}\r\n          />\r\n        </div>\r\n        <Link\r\n          onClick={(e) => (!name || !room ? e.preventDefault() : null)}\r\n          to={`/chat?name=${name}&room=${roomInvite ? roomInvite : room}`}\r\n        >\r\n          <button className=\"btnJoin\" type=\"submit\">\r\n            Sign in\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nimport \"./InfoBar.css\";\r\n\r\nconst InfoBar = ({ room, handleShowUsers }) => (\r\n  <div className=\"infoBar\">\r\n    <div className=\"nameRoom\">{room}</div>\r\n\r\n    <div className=\"usersInRoom\" onClick={handleShowUsers}>\r\n      Users online\r\n    </div>\r\n\r\n    <div className=\"leaveRoom\">\r\n      <a href=\"/\">Leave</a>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nInfoBar.propTypes = {\r\n  room: propTypes.string.isRequired,\r\n  handleShowUsers: propTypes.func.isRequired,\r\n};\r\nexport default InfoBar;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nimport \"./Input.css\";\r\n\r\nconst Input = ({ message, setMessage, sendMessage }) => (\r\n  <form className=\"form\">\r\n    <input\r\n      className=\"input\"\r\n      type=\"text\"\r\n      placeholder=\"Type a message...\"\r\n      value={message}\r\n      onChange={(e) => setMessage(e.target.value)}\r\n      onKeyPress={(e) => (e.key === \"Enter\" ? sendMessage(e) : null)}\r\n    />\r\n    <button className=\"sendBtn\" onClick={(e) => sendMessage(e)}>\r\n      Send\r\n    </button>\r\n  </form>\r\n);\r\n\r\nInput.propTypes = {\r\n  message: propTypes.string.isRequired,\r\n  setMessage: propTypes.func.isRequired,\r\n  sendMessage: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nimport \"./Message.css\";\r\nconst Message = ({ message: { user, text, date }, name }) => {\r\n  let isSendByCurrentUser = false;\r\n\r\n  const trimmedName = name.trim().toLowerCase();\r\n\r\n  if (user === trimmedName) {\r\n    isSendByCurrentUser = true;\r\n  }\r\n\r\n  return isSendByCurrentUser ? (\r\n    <div>\r\n      <div className=\"messageContainer justifyEnd\">\r\n        <p className=\"userName pr-10\">{trimmedName}</p>\r\n        <div className=\"messageBox backgroundBlue\">\r\n          <div className=\"messageText colorWhite\">\r\n            {text}\r\n            <div className=\"messageTime\">{date}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <div className=\"messageContainer justifyStart\">\r\n        <div className=\"messageBox backgroundLight\">\r\n          <div className=\"messageText colorDark\">\r\n            {text}\r\n            <div className=\"messageTime\">{date}</div>\r\n          </div>\r\n        </div>\r\n        <p className=\"userName pl-10 \">{user}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMessage.propTypes = {\r\n  message: propTypes.object.isRequired,\r\n  name: propTypes.string,\r\n};\r\nexport default Message;\r\n","import React from \"react\";\r\nimport propTypes, { object } from \"prop-types\";\r\n\r\nimport \"./Messages.css\";\r\n\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Messages = ({ messages, name }) => (\r\n  <React.Fragment>\r\n    {messages.map((message, i) => (\r\n      <Message message={message} name={name} key={i} />\r\n    ))}\r\n  </React.Fragment>\r\n);\r\n\r\nMessages.propTypes = {\r\n  messages: propTypes.arrayOf(object),\r\n  name: propTypes.string,\r\n};\r\n\r\nexport default Messages;\r\n","import React, { useRef } from \"react\";\r\nimport propTypes, { object } from \"prop-types\";\r\n\r\nimport \"./ShowUsers.css\";\r\n\r\nconst ShowUsers = ({ users, room }) => {\r\n  const inputRef = useRef(null);\r\n  const url = window.location.href.split(\"chat\")[0];\r\n\r\n  function copyLinkInvite() {\r\n    inputRef.current.select();\r\n    document.execCommand(\"copy\");\r\n  }\r\n  return (\r\n    <div className=\"showUsers\">\r\n      {users.map((user, key) => (\r\n        <span className=\"user\" key={key}>\r\n          {user.name}\r\n        </span>\r\n      ))}\r\n      <span className=\"link\" onClick={copyLinkInvite}>\r\n        Invite link\r\n      </span>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        defaultValue={`${url}invite/${room}`}\r\n        className=\"hideInput\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nShowUsers.propTypes = {\r\n  users: propTypes.arrayOf(object).isRequired,\r\n  room: propTypes.string.isRequired,\r\n};\r\n\r\nexport default ShowUsers;\r\n","import React, { useRef } from \"react\";\r\nimport propTypes, { object } from \"prop-types\";\r\n\r\nimport \"./UsersList.css\";\r\nconst UsersList = ({ users, room }) => {\r\n  const inputRefLink = useRef(null);\r\n  const url = window.location.href.split(\"chat\")[0];\r\n\r\n  function copyLinkInvite() {\r\n    inputRefLink.current.select();\r\n    document.execCommand(\"copy\");\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"usersList\">\r\n        <h3>Users online:</h3>\r\n        {users.map((user, key) => (\r\n          <span key={key} className=\"user\">\r\n            {user.name}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      {room !== \"\" && (\r\n        <input\r\n          ref={inputRefLink}\r\n          type=\"text\"\r\n          defaultValue={`${url}invite/${room}`}\r\n          className=\"hideInput\"\r\n        />\r\n      )}\r\n\r\n      <div className=\"btnInvite\">\r\n        <div className=\"btn\" onClick={copyLinkInvite}>\r\n          Invite link\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nUsersList.propTypes = {\r\n  users: propTypes.arrayOf(object).isRequired,\r\n  room: propTypes.string.isRequired,\r\n};\r\n\r\nexport default UsersList;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport Join from \"./components/Join/Join\";\r\nimport Chat from \"./components/Chat/Chat\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" exact component={Join} />\r\n      <Route path=\"/chat\" exact component={Chat} />\r\n      <Route path=\"/invite/:roomInvite\" exact component={Join} />\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport \"./main.css\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}